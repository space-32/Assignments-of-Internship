Version Control with Git

Branching

1. Create a New Branch:
   - Open your terminal or command prompt.
   - Navigate to your Git repository directory.
   - Create a new branch called "feature-branch":
     ```bash
     git checkout -b feature-branch
     ```

2. Make Changes
   - Edit a file in your repository, for example, the `README.md` file:
     ```markdown
     # My First Git Repository

     This is an update made in the feature-branch.
     ```

3. Commit the Changes:
   - Add the changes to the staging area:
     ```bash
     git add README.md
     ```
   - Commit the changes:
     ```bash
     git commit -m "Updated README in feature-branch"
     ```




Merging

1. Switch to the Main Branch:
   - Ensure you are in your repository directory.
   - Switch back to the main branch:
     ```bash
     git checkout main
     ```

2. Merge the Feature Branch:
   - Merge the `feature-branch` into the `main` branch:
     ```bash
     git merge feature-branch
     ```

3. Resolve Conflicts (if any):
   - If there are conflicts, Git will notify you. Open the conflicting files and manually resolve the conflicts.
   - After resolving conflicts, add the resolved files to the staging area:
     ```bash
     git add <conflicted-file>
     ```
   - Commit the merge:
     ```bash
     git commit -m "Resolved merge conflicts and merged feature-branch into main"
     ```

4. Merge Process Explanation:
   - Checkout Main Branch: You switch to the main branch to prepare for merging.
   - Merge Command: You use the `git merge` command to integrate the changes from `feature-branch` into the `main` branch.
   - Conflict Resolution: If there are conflicting changes, Git will pause the merge and mark the conflicting files. You must manually resolve these conflicts by editing the files, then stage and commit the resolved files.
   - Finalizing the Merge* Once all conflicts are resolved, you finalize the merge with a commit.

